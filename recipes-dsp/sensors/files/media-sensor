#!/bin/sh

### BEGIN INIT INFO
# Provides:          app
# Required-Start:    
# Required-Stop:     
# Should-Start:      
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: start trik media sensor
### END INIT INFO

CURRENT_MEDIA_SENSOR_NAME=current-media-sensor
CURRENT_MEDIA_SENSOR_PATH=/etc/trik/$CURRENT_MEDIA_SENSOR_NAME

MEDIA_SENSOR_NAME=$(basename $0)
#back compatibility name parsing
[ $MEDIA_SENSOR_NAME==*.sh ] && MEDIA_SENSOR_NAME=${MEDIA_SENSOR_NAME%.*}
MEDIA_SENSOR_PATH=/etc/trik/sensors/$MEDIA_SENSOR_NAME

MEDIA_SENSOR_PID=/var/run/dsp.pid
MEDIA_SENSOR_LOG=/var/log/dsp.log
MEDIA_SENSOR_CMD=status
VERBOSE_LVL=1
DEBUG='> /dev/null 2>&1'

log() {
  if [[ $2 -le $VERBOSE_LVL ]] ; then
    printf "$MEDIA_SENSOR_NAME: $1\n"
  fi
}

check_if_debug() {
  [ $VERBOSE_LVL -eq 3 ] && DEBUG=
}

debug() {
  eval $@ $DEBUG
}

check_dsp_busy() {
  if [ -e $MEDIA_SENSOR_PID ] ; then
    pid=`cat $MEDIA_SENSOR_PID`
    if debug kill -s 0 $pid ; then
      log "DSP was busy ($pid), restarted" 2
      kill $pid
    else
      rm $MEDIA_SENSOR_PID
      log "process was dead $MEDIA_SENSOR_PID: $pid" 2
    fi
  fi
}

include_defaults() {
  [ -f /etc/default/$MEDIA_SENSOR_NAME.default ] && . /etc/default/$MEDIA_SENSOR_NAME.default
}

parse_flags() {
  while [[ $# > 0 ]]
  do
    key="$1"
    case $key in
      -n|--name)
        MEDIA_SENSOR_NAME=$2
        MEDIA_SENSOR_PATH=/etc/trik/sensors/$MEDIA_SENSOR_NAME
        shift
        ;;
      -p|--port)
        VIDEO_PORT=$2
        VIDEO_PATH=/dev/video$VIDEO_PORT
        shift
        ;;
      -v|--verbose)
        VERBOSE_LVL=$2
        shift
        ;;
      start|stop|restart|reload|status)
        MEDIA_SENSOR_CMD=$key
        ;;
      *)
        log "unknown option: $key" 0
        log "usage:\n\t-n, --name\t- sensor name\n\t-p, --port\t- video port {0,1,2}\n\t-v, --verbose\t- verbose level {0,1,2}" 0
        exit 1
        ;;
    esac
    shift
  done
  log "flags parsed" 2
}

check_sensor() {
  if [ ! -x $MEDIA_SENSOR_PATH/$MEDIA_SENSOR_NAME ] ; then
    log "sensor does not exist" 0
    exit 1
  fi
  log "sensor exists: $MEDIA_SENSOR_PATH/$MEDIA_SENSOR_NAME" 2
}

do_cmd() {
  case $MEDIA_SENSOR_CMD in
    start)
      do_start
      log "daemon started" 1
      ;;
    stop)
      do_stop
      log "daemon stoped" 1
      ;;
    restart)
      do_stop
      do_start
      log "daemon restarted" 1
      ;;
    reload)
      do_reload
      log "daemon reloaded" 1
      ;;
    status)
      status $MEDIA_SENSOR_PATH/$MEDIA_SENSOR_NAME
      exit $?
      ;;
    *)
      echo "Usage: $MEDIA_SENSOR_NAME <flags> {start|stop|restart|status}" 0
      exit 1
  esac
}

do_reload() {
  check_dsp_busy
  cd $MEDIA_SENSOR_PATH
  clean_caches_plug
  init_camera
  eval "DEFAULT_OPS=$DEFAULT_OPS"
  $MEDIA_SENSOR_PATH/$MEDIA_SENSOR_NAME $DEFAULT_OPS >$MEDIA_SENSOR_LOG 2>&1 & echo $! > $MEDIA_SENSOR_PID
  sleep 1    # wait for exposure stabilized
  fix_camera # fix exposure
  wait
}

do_start() {
  echo -e "#!/bin/sh\n /etc/init.d/$MEDIA_SENSOR_NAME $VARS reload" > $CURRENT_MEDIA_SENSOR_PATH
  killall -g $CURRENT_MEDIA_SENSOR_NAME
  $SHELL -c 'timeout --foreground 2s inotifyd - /run:n | { while read x && [[ $x != *sensor.out.fifo ]] ; do true ; done ; kill $$ ; }'
  sleep 3
  debug status $MEDIA_SENSOR_PATH/$MEDIA_SENSOR_NAME || { log "sensor start failed!" 0 ; do_stop; exit 1 ; }
}

do_stop() {
  if [ -e $MEDIA_SENSOR_PID ] ; then rm $MEDIA_SENSOR_PID ; fi
  echo -e "#!/bin/sh\n /etc/init.d/media-sensor-dummy reload" > $CURRENT_MEDIA_SENSOR_PATH
  killall -g $CURRENT_MEDIA_SENSOR_NAME
}

clean_caches_plug() {
  echo 1 > /proc/sys/vm/drop_caches
  echo 2 > /proc/sys/vm/drop_caches
  echo 3 > /proc/sys/vm/drop_caches
}

init_camera () {
  case $MEDIA_SENSOR_NAME in
    *-ov7670)
      init_ov7670 || { log "ov7670 init failed" 0 ; do_stop; exit 1 ; }
      log "ov7670 inited" 2
      ;;
    *-webcam)
      init_webcam || { log "webcam init failed" 0 ; do_stop; exit 1 ; }
      log "webcam inited" 2
      ;;
    *)
      log "unknown camera module" 0 # unknown option
      exit 1
      ;;
  esac
}

init_ov7670() {
  debug /etc/trik/init-ov7670-320x240.sh $VIDEO_PORT
}

init_webcam() {
  debug v4l2-ctl -d $VIDEO_PATH --set-ctrl power_line_frequency=1
  debug v4l2-ctl -d $VIDEO_PATH --set-ctrl white_balance_temperature_auto=0
  debug v4l2-ctl -d $VIDEO_PATH --set-ctrl white_balance_temperature=4000
}

fix_camera () {
  case $MEDIA_SENSOR_NAME in
    *-ov7670)
      fix_ov7670 || { log "ov7670 fix failed" 0 ; do_stop; exit 1 ; }
      log "ov7670 fixed" 2
      ;;
    *-webcam)
      fix_webcam || { log "webcam fix failed" 0 ; do_stop; exit 1 ; }
      log "webcam fixed" 2
      ;;
    *)
      log "unknown camera module" 0 # unknown option
      exit 1
      ;;
  esac
}

fix_ov7670() {                                                      
  case $VIDEO_PORT in  
    0)
      i2cset -y 0x1 0x21 0x13 0x85
      ;;
    1)
      i2cset -y 0x2 0x21 0x13 0x85
      ;;
  esac
}

fix_webcam() {
  debug v4l2-ctl -d $VIDEO_PATH --set-ctrl exposure_auto=1
}

###BEGIN###

. /etc/init.d/functions

VARS=$*
include_defaults
parse_flags $@
check_if_debug
check_sensor
do_cmd
